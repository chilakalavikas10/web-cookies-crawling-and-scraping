# -*- coding: utf-8 -*-
"""WebScraping_WebCrawling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jMcB5qiVWn7MPlyO4XMknVJ2ajY-G3hw
"""

Function categorize_cookies(response):
    Print "Categorizing cookies from the response:"
    For each cookie in response.cookies:
        domain = cookie.domain
        name = cookie.name
        value = cookie.value
        expires = cookie.expires
        secure = "Secure" if cookie.secure else "Not Secure"

        Print "Domain:", domain
        Print "Name:", name
        Print "Value:", value
        If expires is not None:
            Print "Expiry:", expires
        Else:
            Print "Expiry: Not specified"
        Print "Secure:", secure
        Print (a blank line for separation)

Function main():
    url = ''  # Replace with the URL you want to retrieve cookies from
    response = Send an HTTP GET request to url
    If response.status_code is 200:
        Call categorize_cookies(response)
    Else:
        Print "Failed to retrieve the URL. Status code:", response.status_code

Main program:
    Call main()  # Execute the main function when the script is run

import requests
response = requests.get('url')
response.cookies

import requests
from urllib.parse import urlparse
import time

def categorize_cookies(response, url):
    print("Categorizing cookies from the response:")

    parsed_url = urlparse(url)
    base_domain = parsed_url.netloc  # Extract the base domain from the URL

    first_party_cookies = []
    third_party_cookies = []
    persistent_cookies = []

    for cookie in response.cookies:
        domain = cookie.domain
        name = cookie.name
        value = cookie.value
        expires = cookie.expires

        # Check if the cookie domain is a subdomain of the base domain
        if domain.endswith(base_domain):
            category = "First-Party"
            first_party_cookies.append((name, value, expires))
        else:
            category = "Third-Party"
            third_party_cookies.append((name, value, expires))

        if expires:
            # Check if the cookie is persistent (has an expiration date)
            if expires > time.time():
                persistence = "Persistent"
                persistent_cookies.append((name, value, expires))
            else:
                persistence = "Session"
        else:
            persistence = "Session"

        print("Domain:", domain)
        print("Name:", name)
        print("Value:", value)
        print("Category:", category)
        print("Persistence:", persistence)
        print()

    print("\nFirst-Party Cookies:")
    for name, value, expires in first_party_cookies:
        print(f"Name: {name}, Value: {value}, Expiry: {expires if expires else 'Session'}")

    print("\nThird-Party Cookies:")
    for name, value, expires in third_party_cookies:
        print(f"Name: {name}, Value: {value}, Expiry: {expires if expires else 'Session'}")

    print("\nPersistent Cookies:")
    for name, value, expires in persistent_cookies:
        print(f"Name: {name}, Value: {value}, Expiry: {expires}")

def main():
    url = 'https://www.newyorker.com/science/annals-of-artificial-intelligence/what-kind-of-mind-does-chatgpt-have'  # Replace with the URL you want to request
    response = requests.get(url)

    if response.status_code == 200:
        categorize_cookies(response, url)
    else:
        print(f"Failed to retrieve the URL. Status code: {response.status_code}")

if _name_ == "_main_":
    main()

from urllib.request import urlopen
from bs4 import BeautifulSoup as soup
import re
tom = urlopen("url")
bsobj = soup(tom.read())
for link in bsobj.findAll('a'):
    if 'href' in link.attrs:
      print(link.attrs['href'])

import requests

def categorize_cookies(response):
    print("Categorizing cookies from the response:")

    for cookie in response.cookies:
        domain = cookie.domain
        name = cookie.name
        value = cookie.value
        expires = cookie.expires
        secure = "Secure" if cookie.secure else "Not Secure"

        print("Domain:", domain)
        print("Name:", name)
        print("Value:", value)

        # Check if 'expires' is not None
        if expires:
            print("Expiry:", expires)
        else:
            print("Expiry: Not specified")

        print("Secure:", secure)
        print()

def main():
    url = ''
    response = requests.get(url)

    if response.status_code == 200:
        categorize_cookies(response)
    else:
        print(f"Failed to retrieve the URL. Status code: {response.status_code}")

if _name_ == "_main_":
    main()